<script>
	import { onMount } from 'svelte';
	import { writable, get } from 'svelte/store';

	/** Size of the grid (n x n)
	 * @type {number}
	 */
	let size = 9;

	/** Size of the canvas
	 * @type {number}
	 */
	const canvasSize = 850;

	let canvas;
	let ctx;

	/** Create the initial grid, can also be called if a reset is required
	 * @returns {number[][]} The grid
	 */
	const createGrid = () =>
		Array(size)
			.fill(null)
			.map(() => Array(size).fill(0));

	/** Store the grid state in a reactive variable
	 * @type {number[][]}
	 */
	let cells = writable(createGrid());

	// Correct way to initialize the grid with some alive cells:
	$cells = createGrid();
	$cells[Math.floor(size / 2)][Math.floor(size / 2)] = 1;
	$cells[Math.floor(size / 2) - 1][Math.floor(size / 2)] = 1;
	$cells[Math.floor(size / 2) + 1][Math.floor(size / 2) + 1] = 1;
	$cells[Math.floor(size / 2)][Math.floor(size / 2) - 1] = 1;
	$cells[Math.floor(size / 2)][Math.floor(size / 2) + 1] = 1;

	onMount(() => {
		canvas.addEventListener('click', (e) => {
			const [x, y] = [e.offsetX, e.offsetY];
			const cellSize = 850 / size;
			const [cellX, cellY] = [Math.floor(x / cellSize), Math.floor(y / cellSize)];
			alert(`Cell: ${cellX}, ${cellY}`);
		});
		ctx = canvas.getContext('2d');
	});

	/**
	 * Draw a cell on the canvas
	 * @param {number} x - The x coordinate (of the array)
	 * @param {number} y - The y coordinate (of the array)
	 * @param {number} status - The status of the cell (0 or 1)
	 */
	function drawCell(x, y, status) {
		const cellSize = 850 / size;
		ctx.fillStyle = status ? 'black' : 'white';
		ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
	}

	class Cell {
		constructor(x, y, status) {
			this.x = x;
			this.y = y;
			this.status = status;
		}

		is_alive() {
			return this.status === 1;
		}

		string() {
			return `(${this.x}, ${this.y}) - ${this.status}`;
		}
	}

	/**
	 * Get the cells
	 * @returns {Cell[]} The alive cells
	 */
	function getAllCells() {
		const _cells = [];
		for (let i = 0; i < $cells.length; i++) {
			for (let j = 0; j < $cells[i].length; j++) {
				if ($cells[i][j] == 1) console.log(i, j);
				_cells.push(new Cell(i, j, $cells[i][j]));
			}
		}
		return _cells;
	}

	/**
	 * Apply the rule to the cell
	 * @param {Cell} cell - The cell to apply the rule to
	 */
	function applyRule(cell) {
		const [x, y] = [cell.x, cell.y];

		// Kill the cell
		cells[x][y] = 0;

		// Update cells around
		if (x > 0) {
			cells[x - 1][y] = 1;
		}
		if (y > 0) {
			cells[x][y - 1] = 1;
		}
		if (x < size - 1) {
			cells[x + 1][y] = 1;
		}
		if (y < size - 1) {
			cells[x][y + 1] = 1;
		}
	}

	/**
	 * Get the alive neighbors of a cell.
	 * @param {Cell} cell - The cell to get the neighbors of
	 * @returns {number} The number of alive neighbors
	 */
	function getAliveNeighbors(cell) {
		let count = 0;

		// for (let i = Math.max(0, row - 1); i <= Math.min(size - 1, row + 1); i++) {
		// 	for (let j = Math.max(0, col - 1); j <= Math.min(size - 1, col + 1); j++) {
		// 		if (i === row && j === col) continue;
		// 		if ($cells[i][j] === 1) {
		// 			count++;
		// 		}
		// 	}
		// }

		const [col, row] = [cell.x, cell.y];
		const rows = $cells.length;
		const cols = $cells[0].length; // Assuming all rows have the same length

		for (let i = Math.max(0, row - 1); i <= Math.min(rows - 1, row + 1); i++) {
			for (let j = Math.max(0, col - 1); j <= Math.min(cols - 1, col + 1); j++) {
				if (i === row && j === col) continue; // Skip the cell itself

				count += $cells[i][j];
				console.log(`Neighbor at (${i}, ${j}): ${$cells[i][j]}`);
			}
		}

		return count;
	}

	function conways_2(cell) {
		// Create the new broad, since the cells should be based on the previous state
		const newCells = JSON.parse(JSON.stringify($cells));

		const [x, y] = [cell.x, cell.y];
		const aliveNeighbors = getAliveNeighbors(cell);
		if (cell.is_alive()) {
			if (aliveNeighbors < 2 || aliveNeighbors > 3) {
				newCells[x][y] = 0;
			} else {
				newCells[x][y] = 1;
			}
		} else {
			if (aliveNeighbors === 3) {
				newCells[x][y] = 1;
			}
		}
		$cells = newCells;
	}
	function conways(cell) {
		// 1. Get the current value of the $cells store:
		const currentCells = get(cells); // Use get()

		// 2. Create a *deep* copy of the current grid:
		// Option 1: Using JSON (simplest for primitives)
		const newCells = JSON.parse(JSON.stringify(currentCells));

		// Option 2: Using map (if cells are objects and you need to copy nested properties):
		// const newCells = currentCells.map(row => row.map(cell => ({...cell})));

		// 3. Update the *new* grid:
		const [x, y] = [cell.x, cell.y];
		const aliveNeighbors = getAliveNeighbors(cell);

		if (cell.is_alive()) {
			if (aliveNeighbors < 2 || aliveNeighbors > 3) {
				newCells[x][y] = 0;
			} else {
				newCells[x][y] = 1;
			}
		} else {
			if (aliveNeighbors === 3) {
				newCells[x][y] = 1;
			}
		}

		// 4. Update the $cells store with the *new* grid:
		$cells = newCells; // This triggers the reactivity
	}

	function update() {
		const cells = getAllCells();
		for (let i = 0; i < cells.length; i++) {
			conways(cells[i]);
		}
	}

	/**
	 * Run update every second
	 */
	// setInterval(update, 1000);
	update();

	$effect(() => {
		ctx.clearRect(0, 0, canvasSize, canvasSize);
		// let grid = '';
		for (let i = 0; i < $cells.length; i++) {
			// let str = '';
			for (let j = 0; j < $cells[i].length; j++) {
				// str += cells[i][j] ? ' 1' : ' 0';
				drawCell(i, j, $cells[i][j]);
			}
			// grid += str + '\n';
		}
		// console.log(grid);
	});
</script>

<div class="flex h-screen items-center justify-center">
	<canvas bind:this={canvas} class="border-1 border-black" width={canvasSize} height={canvasSize}
	></canvas>
</div>
